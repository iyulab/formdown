# Core-First Architecture Demo

This sample demonstrates Formdown's Core-First architecture where the `@formdown/core` package provides comprehensive form management through the **FormManager** and **FormDataBinding** classes.

## User Registration Example

Let's create a complete registration form with reactive data management:

@form[action="/register" method="POST"]

### Personal Information

@name(Full Name)*: [placeholder="Enter your full name" value="John Doe"]
@email(Email Address)*: @[placeholder="your.email@example.com" value="john@example.com"]
@age: [number min=18 max=100 value=25]

### Preferences & Interests

Choose your areas of interest:

@interests{Web Development,Mobile Apps,AI/ML,Data Science,*(Custom Interest)}: c[value="Web Development,AI/ML"]

What's your experience level?

@experience{Beginner,Intermediate,Advanced,Expert,*(Experience Level)}: r[value="Intermediate"]

### Communication Preferences

How did you hear about us?

@source{Website,Social Media,Friend Referral,Newsletter,*(Please specify)}: r[value="Website"]

@newsletter(Subscribe to updates): c[value=true]

## Technical Architecture

The form above demonstrates:

### 1. FormManager Integration
- **Centralized Logic**: All form processing handled by Core package
- **Schema Extraction**: Automatic field discovery and validation rules
- **Data Binding**: Reactive updates with proper value priority

### 2. Value Priority System
The form implements the priority system: `context.data` > `schema value` > `empty`

- Default values are set via `value` attributes in the schema
- User interactions override schema defaults
- External data updates take highest priority

### 3. Event-Driven Architecture
```javascript
// FormManager provides reactive events
manager.on('data-change', ({ field, value, formData }) => {
  console.log(`${field} changed to ${value}`);
});

manager.on('validation-error', ({ field, errors }) => {
  console.log(`Validation error: ${errors[0].message}`);
});
```

### 4. Core API Usage
```javascript
import { FormManager, createFormManager } from '@formdown/core';

// Full control approach
const manager = new FormManager();
manager.parse(formContent);
manager.setFieldValue('name', 'Jane Smith');
const html = manager.render();

// Convenience approach
const quickManager = createFormManager(formContent);
const data = quickManager.getData();
```

## Advanced Features

### Multi-Value Fields
The interests field supports multiple selections with "other" options:
- Pre-selected: "Web Development" and "AI/ML"
- Custom option available for unlisted interests
- Clean data structure without `_other` suffixes

### Smart Validation
All fields include appropriate validation:
- Required field indicators (*)
- Type-specific validation (email, number ranges)
- Custom validation messages

### Form State Management
```javascript
// Check form state
console.log('Has changes:', manager.isDirty());
console.log('Validation:', manager.validate());
console.log('Current data:', manager.getData());

// Reset to defaults
manager.reset();
```

This architecture makes Formdown framework-agnostic and highly testable, with all business logic centralized in the Core package.