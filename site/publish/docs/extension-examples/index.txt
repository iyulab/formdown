1:"$Sreact.fragment"
2:I[7740,["177","static/chunks/app/layout-da5425ed4b9f6364.js"],"ThemeProvider"]
3:I[7555,[],""]
4:I[1901,["874","static/chunks/874-994f48b66e83c627.js","39","static/chunks/app/error-7fbbcffb8614ab2c.js"],"default"]
5:I[1295,[],""]
6:I[6874,["874","static/chunks/874-994f48b66e83c627.js","345","static/chunks/app/not-found-b14baa73986bd718.js"],""]
7:I[9243,["499","static/chunks/app/docs/layout-9c00b23166a276ed.js"],""]
9:I[9665,[],"OutletBoundary"]
c:I[4911,[],"AsyncMetadataOutlet"]
e:I[9665,[],"ViewportBoundary"]
10:I[9665,[],"MetadataBoundary"]
12:I[6614,[],""]
:HL["/_next/static/css/6a30088796e530ee.css","style"]
0:{"P":null,"b":"0YmaOTYzH6ie782YfQ5i2","p":"","c":["","docs","extension-examples",""],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","extension-examples","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6a30088796e530ee.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                try {\n                  const savedTheme = localStorage.getItem('formdown-theme');\n                  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n                  const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');\n                  \n                  if (theme === 'dark') {\n                    document.documentElement.classList.add('dark');\n                    document.body.classList.add('dark');\n                  }\n                } catch (e) {\n                  // Silently fail\n                }\n              })();\n            "}}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"SoftwareApplication\",\"name\":\"Formdown\",\"description\":\"Create beautiful, interactive HTML forms using a simple markdown-like syntax\",\"applicationCategory\":\"DeveloperApplication\",\"operatingSystem\":\"Web Browser\",\"offers\":{\"@type\":\"Offer\",\"price\":\"0\",\"priceCurrency\":\"USD\"},\"creator\":{\"@type\":\"Organization\",\"name\":\"iyulab\",\"url\":\"https://github.com/iyulab\"},\"url\":\"https://formdown.dev\",\"downloadUrl\":\"https://github.com/iyulab/formdown\",\"sameAs\":[\"https://github.com/iyulab/formdown\",\"https://www.npmjs.com/package/@formdown/core\"]}"}}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}]]}],["$","body",null,{"className":"__variable_188709 __variable_9a8899 antialiased","children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center max-w-md mx-auto px-4","children":[["$","h1",null,{"className":"text-6xl font-bold text-blue-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"The page you are looking for might have been removed, had its name changed, or is temporarily unavailable."}],["$","div",null,{"className":"space-x-4","children":[["$","$L6",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors inline-block","children":"Go Home"}],["$","$L6",null,{"href":"/docs","className":"bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-200 transition-colors inline-block","children":"View Docs"}]]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","div",null,{"className":"docs-layout","children":[["$","$L7",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/editor@latest/dist/standalone.js","strategy":"beforeInteractive"}],["$","$L7",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/ui@latest/dist/standalone.js","strategy":"beforeInteractive"}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}],{"children":[["slug","extension-examples","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":["$La","$Lb",["$","$Lc",null,{"promise":"$@d"}]]}]]}],{},null,false]},null,false]},null,false]},[["$","div","l",{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center","children":[["$","div",null,{"className":"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"}],["$","p",null,{"className":"text-gray-600","children":"Loading Formdown..."}]]}]}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","Jk5wYDx8skkZ212wxgUOPv",{"children":[["$","$Le",null,{"children":"$Lf"}],null]}],["$","$L10",null,{"children":"$L11"}]]}],false]],"m":"$undefined","G":["$12","$undefined"],"s":false,"S":true}
13:"$Sreact.suspense"
14:I[4911,[],"AsyncMetadata"]
16:I[984,["874","static/chunks/874-994f48b66e83c627.js","375","static/chunks/375-811e0189f6b673fa.js","508","static/chunks/app/docs/%5Bslug%5D/page-1286a5c53c96b553.js"],"default"]
11:["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":["$","$L14",null,{"promise":"$@15"}]}]}]
17:T629,prose prose-lg max-w-none   prose-headings:text-gray-900 dark:prose-headings:text-white prose-headings:font-semibold   prose-h1:text-2xl prose-h1:border-b prose-h1:border-gray-200 dark:prose-h1:border-gray-700 prose-h1:pb-3 prose-h1:mb-6   prose-h2:text-xl prose-h2:mt-8 prose-h2:mb-4   prose-h3:text-lg prose-h3:mt-6 prose-h3:mb-3   prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed   prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline   prose-strong:text-gray-900 dark:prose-strong:text-white prose-strong:font-semibold   prose-code:text-pink-600 dark:prose-code:text-pink-400 prose-code:bg-pink-50 dark:prose-code:bg-pink-900/30 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm   prose-pre:bg-gray-900 dark:prose-pre:bg-black prose-pre:text-gray-100 dark:prose-pre:text-gray-200 prose-pre:rounded-lg prose-pre:p-4   prose-blockquote:border-l-4 prose-blockquote:border-blue-200 dark:prose-blockquote:border-blue-700 prose-blockquote:bg-blue-50 dark:prose-blockquote:bg-blue-900/20 prose-blockquote:pl-4 prose-blockquote:py-2   prose-ul:my-4 prose-ol:my-4   prose-li:text-gray-700 dark:prose-li:text-gray-300   prose-table:border-collapse prose-table:border prose-table:border-gray-300 dark:prose-table:border-gray-600   prose-th:bg-gray-50 dark:prose-th:bg-gray-800 prose-th:border prose-th:border-gray-300 dark:prose-th:border-gray-600 prose-th:px-3 prose-th:py-2 prose-th:text-left   prose-td:border prose-td:border-gray-300 dark:prose-td:border-gray-600 prose-td:px-3 prose-td:py-218:T12bf6,<p>Real-world examples of how to use the Formdown extension system to create powerful, customized form experiences.</p>
<h2>Bootstrap Integration</h2>
<p>Create a complete Bootstrap 5 theme integration:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>

<span class="token keyword">const</span> bootstrapTheme <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'bootstrap-theme'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">'Complete Bootstrap 5 integration'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'css-class'</span><span class="token punctuation">,</span>
      priority<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> typeClasses <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token string-property property">'text'</span><span class="token operator">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'email'</span><span class="token operator">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span> 
          <span class="token string-property property">'password'</span><span class="token operator">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'textarea'</span><span class="token operator">:</span> <span class="token string">'form-control'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'select'</span><span class="token operator">:</span> <span class="token string">'form-select'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'checkbox'</span><span class="token operator">:</span> <span class="token string">'form-check-input'</span><span class="token punctuation">,</span>
          <span class="token string-property property">'radio'</span><span class="token operator">:</span> <span class="token string">'form-check-input'</span>
        <span class="token punctuation">}</span>
        
        context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">=</span> typeClasses<span class="token punctuation">[</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'form-control'</span>
        <span class="token keyword">return</span> context
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'template-render'</span><span class="token punctuation">,</span>
      priority<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'checkbox'</span> <span class="token operator">||</span> context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'radio'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          context<span class="token punctuation">.</span>template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
            &lt;div class="form-check">
              </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
              &lt;label class="form-check-label" for="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">
                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
              &lt;/label>
            &lt;/div>
          </span><span class="token template-punctuation string">`</span></span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          context<span class="token punctuation">.</span>template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
            &lt;div class="mb-3">
              &lt;label for="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="form-label"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/label>
              </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
              &lt;div class="invalid-feedback">&lt;/div>
            &lt;/div>
          </span><span class="token template-punctuation string">`</span></span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> context
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// Usage</span>
<span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>bootstrapTheme<span class="token punctuation">)</span>

<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
@name: [text required]
@email: [email required] 
@role{Developer,Designer,Manager}: r[required]
@notifications: [checkbox label="Email updates"]
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseForm</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span> extensionManager <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">generateHTML</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span> extensionManager <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>Result:</strong> All form fields automatically get Bootstrap classes and proper structure.</p>
<h2>Custom Field Types</h2>
<h3>Credit Card Field</h3>
<p>Create a specialized credit card input with validation:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> creditCardPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'credit-card-plugin'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  fieldTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'credit-card'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">parser</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> match <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@(\w+):\s*\[credit-card\](.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
      
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'credit-card'</span><span class="token punctuation">,</span>
        label<span class="token operator">:</span> <span class="token string">'Credit Card Number'</span><span class="token punctuation">,</span>
        attributes<span class="token operator">:</span> <span class="token punctuation">{</span>
          pattern<span class="token operator">:</span> <span class="token string">'[0-9\\s]{13,19}'</span><span class="token punctuation">,</span>
          inputmode<span class="token operator">:</span> <span class="token string">'numeric'</span><span class="token punctuation">,</span>
          autocomplete<span class="token operator">:</span> <span class="token string">'cc-number'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      
      <span class="token comment">// Luhn algorithm validation</span>
      <span class="token keyword">const</span> cleanNumber <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidLuhn</span><span class="token punctuation">(</span>cleanNumber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">'invalid-credit-card'</span><span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">'Please enter a valid credit card number'</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="credit-card-field">
        &lt;label for="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/label>
        &lt;input type="text" 
               name="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" 
               id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
               pattern="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>pattern<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
               inputmode="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>inputmode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
               autocomplete="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>autocomplete<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
               placeholder="1234 5678 9012 3456"
               </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>required <span class="token operator">?</span> <span class="token string">'required'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> />
        &lt;div class="card-icons">
          &lt;img src="/icons/visa.svg" alt="Visa" />
          &lt;img src="/icons/mastercard.svg" alt="Mastercard" />
        &lt;/div>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isValidLuhn</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> alternate <span class="token operator">=</span> <span class="token boolean">false</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> digit <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>alternate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      digit <span class="token operator">*=</span> <span class="token number">2</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        digit <span class="token operator">=</span> <span class="token punctuation">(</span>digit <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    sum <span class="token operator">+=</span> digit
    alternate <span class="token operator">=</span> <span class="token operator">!</span>alternate
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> sum <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token comment">// Usage in forms</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
# Payment Information

@card_number: [credit-card required]
@expiry: [text pattern="[0-9]{2}/[0-9]{2}" placeholder="MM/YY"]
@cvv: [text pattern="[0-9]{3,4}" placeholder="123"]
</span><span class="token template-punctuation string">`</span></span></code></pre><h3>File Upload with Preview</h3>
<p>Create a drag-and-drop file upload field:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> fileUploadPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'file-upload-plugin'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  fieldTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'file-upload'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">parser</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> match <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@(\w+):\s*\[file-upload(?:\s+([^\]]*))?\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
      
      <span class="token keyword">const</span> attributes <span class="token operator">=</span> <span class="token function">parseAttributes</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span>
      
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'file-upload'</span><span class="token punctuation">,</span>
        label<span class="token operator">:</span> attributes<span class="token punctuation">.</span>label <span class="token operator">||</span> <span class="token string">'Upload Files'</span><span class="token punctuation">,</span>
        attributes<span class="token operator">:</span> <span class="token punctuation">{</span>
          accept<span class="token operator">:</span> attributes<span class="token punctuation">.</span>accept <span class="token operator">||</span> <span class="token string">'*/*'</span><span class="token punctuation">,</span>
          multiple<span class="token operator">:</span> attributes<span class="token punctuation">.</span>multiple <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          maxSize<span class="token operator">:</span> attributes<span class="token punctuation">.</span>maxSize <span class="token operator">||</span> <span class="token string">'10MB'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="file-upload-field" data-field="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">
        &lt;label></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/label>
        &lt;div class="upload-area" 
             ondrop="handleDrop(event, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')"
             ondragover="handleDragOver(event)"
             ondragleave="handleDragLeave(event)">
          &lt;input type="file" 
                 name="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" 
                 id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
                 accept="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>accept<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
                 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>multiple <span class="token operator">?</span> <span class="token string">'multiple'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
                 style="display: none;"
                 onchange="handleFileSelect(event)" />
          &lt;div class="upload-prompt">
            &lt;svg class="upload-icon" viewBox="0 0 24 24">
              &lt;path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" />
            &lt;/svg>
            &lt;p>Drag files here or &lt;button type="button" class="browse-btn" onclick="document.getElementById('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').click()">browse&lt;/button>&lt;/p>
            &lt;small>Max size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token operator">?.</span>maxSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/small>
          &lt;/div>
        &lt;/div>
        &lt;div class="file-previews" id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-previews">&lt;/div>
      &lt;/div>
      
      &lt;style>
        .upload-area {
          border: 2px dashed #ccc;
          border-radius: 8px;
          padding: 40px;
          text-align: center;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        .upload-area:hover,
        .upload-area.drag-over {
          border-color: #007bff;
          background-color: #f8f9fa;
        }
        .upload-icon {
          width: 48px;
          height: 48px;
          margin-bottom: 16px;
          fill: #6c757d;
        }
        .browse-btn {
          color: #007bff;
          background: none;
          border: none;
          text-decoration: underline;
          cursor: pointer;
        }
        .file-previews {
          margin-top: 16px;
        }
        .file-preview {
          display: flex;
          align-items: center;
          padding: 8px;
          background: #f8f9fa;
          border-radius: 4px;
          margin-bottom: 8px;
        }
        .file-preview img {
          width: 40px;
          height: 40px;
          object-fit: cover;
          border-radius: 4px;
          margin-right: 12px;
        }
      &lt;/style>
      
      &lt;script>
        function handleDrop(event, fieldName) {
          event.preventDefault()
          event.currentTarget.classList.remove('drag-over')
          
          const files = event.dataTransfer.files
          handleFiles(files, fieldName)
        }
        
        function handleDragOver(event) {
          event.preventDefault()
          event.currentTarget.classList.add('drag-over')
        }
        
        function handleDragLeave(event) {
          event.currentTarget.classList.remove('drag-over')
        }
        
        function handleFileSelect(event) {
          const files = event.target.files
          handleFiles(files, event.target.name)
        }
        
        function handleFiles(files, fieldName) {
          const previewContainer = document.getElementById(fieldName + '-previews')
          
          Array.from(files).forEach(file => {
            const preview = document.createElement('div')
            preview.className = 'file-preview'
            
            if (file.type.startsWith('image/')) {
              const img = document.createElement('img')
              img.src = URL.createObjectURL(file)
              img.onload = () => URL.revokeObjectURL(img.src)
              preview.appendChild(img)
            }
            
            const info = document.createElement('div')
            info.innerHTML = \`
              &lt;div>&lt;strong>\${file.name}&lt;/strong>&lt;/div>
              &lt;div>&lt;small>\${formatFileSize(file.size)}&lt;/small>&lt;/div>
            \`
            preview.appendChild(info)
            
            previewContainer.appendChild(preview)
          })
        }
        
        function formatFileSize(bytes) {
          if (bytes === 0) return '0 Bytes'
          const k = 1024
          const sizes = ['Bytes', 'KB', 'MB', 'GB']
          const i = Math.floor(Math.log(bytes) / Math.log(k))
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
        }
      &lt;/script>
    </span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// Usage</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
# Document Upload

@resume: [file-upload accept=".pdf,.doc,.docx" label="Upload Resume"]
@portfolio: [file-upload accept="image/*" multiple label="Portfolio Images"]
@references: [file-upload accept=".pdf" label="References"]
</span><span class="token template-punctuation string">`</span></span></code></pre><h2>Analytics Integration</h2>
<p>Track form interactions with Google Analytics:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> analyticsPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'google-analytics'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'post-generate'</span><span class="token punctuation">,</span>
      <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Track form render</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gtag <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">gtag</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'form_render'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            form_id<span class="token operator">:</span> context<span class="token punctuation">.</span>parseResult<span class="token punctuation">.</span>id <span class="token operator">||</span> <span class="token string">'unknown'</span><span class="token punctuation">,</span>
            field_count<span class="token operator">:</span> context<span class="token punctuation">.</span>parseResult<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
            field_types<span class="token operator">:</span> context<span class="token punctuation">.</span>parseResult<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">=></span> f<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> context
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'field-validate'</span><span class="token punctuation">,</span>
      <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Track validation errors</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>isValid <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> gtag <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">gtag</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'form_validation_error'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            field_name<span class="token operator">:</span> context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            field_type<span class="token operator">:</span> context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
            error_type<span class="token operator">:</span> <span class="token string">'validation_failed'</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> context
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">initialize</span><span class="token operator">:</span> <span class="token punctuation">(</span>eventEmitter<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Track form submissions</span>
    eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'form-submit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gtag <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">gtag</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'form_submit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          form_id<span class="token operator">:</span> data<span class="token punctuation">.</span>formId<span class="token punctuation">,</span>
          field_count<span class="token operator">:</span> data<span class="token punctuation">.</span>fieldCount<span class="token punctuation">,</span>
          submission_time<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token comment">// Track field interactions</span>
    eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'field-focus'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gtag <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">gtag</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'form_field_focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          field_name<span class="token operator">:</span> data<span class="token punctuation">.</span>fieldName<span class="token punctuation">,</span>
          field_type<span class="token operator">:</span> data<span class="token punctuation">.</span>fieldType
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><h2>Internationalization</h2>
<p>Create a complete i18n solution:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> i18nPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'i18n-plugin'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'post-parse'</span><span class="token punctuation">,</span>
    priority<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> locale <span class="token operator">=</span> <span class="token function">getCurrentLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      
      context<span class="token punctuation">.</span>parseResult<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Translate labels</span>
        field<span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>label<span class="token punctuation">,</span> locale<span class="token punctuation">)</span>
        
        <span class="token comment">// Translate placeholders</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>placeholder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          field<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>placeholder<span class="token punctuation">,</span> locale<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// Translate options for select/radio/checkbox</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          field<span class="token punctuation">.</span>options <span class="token operator">=</span> field<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>option <span class="token operator">=></span> 
            <span class="token function">translate</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> locale<span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// Translate validation messages</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          field<span class="token punctuation">.</span>errorMessage <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>errorMessage<span class="token punctuation">,</span> locale<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getCurrentLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>lang <span class="token operator">||</span> 
         navigator<span class="token punctuation">.</span>language <span class="token operator">||</span> 
         <span class="token string">'en'</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">translate</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> translations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">'en'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'Name'</span><span class="token operator">:</span> <span class="token string">'Name'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Email'</span><span class="token operator">:</span> <span class="token string">'Email'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Submit'</span><span class="token operator">:</span> <span class="token string">'Submit'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Required field'</span><span class="token operator">:</span> <span class="token string">'Required field'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">'ko'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'Name'</span><span class="token operator">:</span> <span class="token string">'이름'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Email'</span><span class="token operator">:</span> <span class="token string">'이메일'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Submit'</span><span class="token operator">:</span> <span class="token string">'제출'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Required field'</span><span class="token operator">:</span> <span class="token string">'필수 항목'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">'es'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'Name'</span><span class="token operator">:</span> <span class="token string">'Nombre'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Email'</span><span class="token operator">:</span> <span class="token string">'Correo electrónico'</span><span class="token punctuation">,</span> 
      <span class="token string-property property">'Submit'</span><span class="token operator">:</span> <span class="token string">'Enviar'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Required field'</span><span class="token operator">:</span> <span class="token string">'Campo requerido'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">'fr'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'Name'</span><span class="token operator">:</span> <span class="token string">'Nom'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Email'</span><span class="token operator">:</span> <span class="token string">'E-mail'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Submit'</span><span class="token operator">:</span> <span class="token string">'Soumettre'</span><span class="token punctuation">,</span>
      <span class="token string-property property">'Required field'</span><span class="token operator">:</span> <span class="token string">'Champ requis'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> translations<span class="token punctuation">[</span>locale<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">[</span>text<span class="token punctuation">]</span> <span class="token operator">||</span> text
<span class="token punctuation">}</span>

<span class="token comment">// Usage</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
@name: [text required placeholder="Enter your name"]
@email: [email required]
@submit: [submit label="Submit"]
</span><span class="token template-punctuation string">`</span></span>

<span class="token comment">// Form will be automatically translated based on user's locale</span></code></pre><h2>Auto-Save Plugin</h2>
<p>Automatically save form data to localStorage:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> autoSavePlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'auto-save'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'post-generate'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Setup auto-save for all fields</span>
      <span class="token function">setupAutoSave</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>parseResult<span class="token punctuation">.</span>fields<span class="token punctuation">)</span>
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setupAutoSave</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  fields<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    <span class="token comment">// Restore saved data</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>formData<span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      element<span class="token punctuation">.</span>value <span class="token operator">=</span> formData<span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// Setup auto-save on input</span>
    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">saveFormData</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> element<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment">// Save on change for select/radio/checkbox</span>
    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">saveFormData</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> element<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token comment">// Clear saved data on successful submit</span>
  <span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">clearSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'formdown-autosave'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'{}'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">saveFormData</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">loadSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  data<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span> <span class="token operator">=</span> value
  data<span class="token punctuation">.</span>_timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'formdown-autosave'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">clearSavedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'formdown-autosave'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">executedFunction</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
      <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><h2>Combining Multiple Plugins</h2>
<p>Real-world forms often need multiple plugins working together:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Register all plugins</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>bootstrapTheme<span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>creditCardPlugin<span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>fileUploadPlugin<span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>analyticsPlugin<span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>i18nPlugin<span class="token punctuation">)</span>
extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>autoSavePlugin<span class="token punctuation">)</span>

<span class="token comment">// Create a comprehensive form</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
# Complete Registration Form

## Personal Information

@name: [text required placeholder="Full Name"]
@email: [email required]
@phone: [tel placeholder="Phone Number"]

## Payment Details

@card_number: [credit-card required]
@expiry: [text pattern="[0-9]{2}/[0-9]{2}" placeholder="MM/YY" required]
@cvv: [text pattern="[0-9]{3,4}" placeholder="CVV" required]

## Documents

@id_document: [file-upload accept="image/*,.pdf" label="ID Document"]
@proof_address: [file-upload accept=".pdf,image/*" label="Proof of Address"]

## Preferences

@language{English,Español,Français,한국어,*(Other Language)}: s[required]
@notifications{Email,SMS,Push,*(Contact Method)}: c[]

@submit: [submit label="Complete Registration"]
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseForm</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span> extensionManager <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">generateHTML</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span> extensionManager <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>Result:</strong> A fully-featured form with:</p>
<ul>
<li>Bootstrap styling</li>
<li>Custom credit card validation</li>
<li>Drag-and-drop file uploads</li>
<li>Analytics tracking</li>
<li>Multi-language support</li>
<li>Auto-save functionality</li>
<li>All working together seamlessly</li>
</ul>
<h2>Testing Your Plugins</h2>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager<span class="token punctuation">,</span> createTestContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Bootstrap Theme Plugin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> extensionManager

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>bootstrapTheme<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'should add Bootstrap classes to text fields'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTestContext</span><span class="token punctuation">(</span><span class="token string">'css-class'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      field<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">'Test'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">executeHooks</span><span class="token punctuation">(</span><span class="token string">'css-class'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'form-control'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'should wrap fields in Bootstrap structure'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTestContext</span><span class="token punctuation">(</span><span class="token string">'template-render'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      field<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">'Test'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      template<span class="token operator">:</span> <span class="token string">'&lt;input type="text" name="test">'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">executeHooks</span><span class="token punctuation">(</span><span class="token string">'template-render'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>template<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'mb-3'</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>template<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'form-label'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>These examples show the power and flexibility of the Formdown extension system. You can create sophisticated, customized form experiences while maintaining clean, readable code.</p>
8:["$","$L16",null,{"currentSlug":"extension-examples","children":["$","div",null,{"children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900 dark:text-white mb-6","children":"Extension Examples"}],["$","article",null,{"className":"$17","dangerouslySetInnerHTML":{"__html":"$18"}}]]}]}]
b:null
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
d:{"metadata":[["$","title","0",{"children":"Formdown - Markdown-based Form Builder"}],["$","meta","1",{"name":"description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","2",{"name":"author","content":"iyulab"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","meta","4",{"name":"keywords","content":"form builder,markdown forms,html forms,form generator,web forms,interactive forms,form validation,formdown,javascript forms,typescript forms"}],["$","meta","5",{"name":"creator","content":"iyulab"}],["$","meta","6",{"name":"publisher","content":"iyulab"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://formdown.dev/"}],["$","meta","10",{"property":"og:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","11",{"property":"og:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","12",{"property":"og:url","content":"https://formdown.dev/"}],["$","meta","13",{"property":"og:site_name","content":"Formdown"}],["$","meta","14",{"property":"og:locale","content":"en_US"}],["$","meta","15",{"property":"og:image","content":"https://formdown.dev/logo.png"}],["$","meta","16",{"property":"og:image:width","content":"1200"}],["$","meta","17",{"property":"og:image:height","content":"630"}],["$","meta","18",{"property":"og:image:alt","content":"Formdown - Markdown-based Form Builder"}],["$","meta","19",{"property":"og:type","content":"website"}],["$","meta","20",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","21",{"name":"twitter:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","22",{"name":"twitter:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax."}],["$","meta","23",{"name":"twitter:image","content":"https://formdown.dev/logo.png"}],["$","link","24",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"256x256"}]],"error":null,"digest":"$undefined"}
15:{"metadata":"$d:metadata","error":null,"digest":"$undefined"}
