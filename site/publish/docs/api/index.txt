1:"$Sreact.fragment"
2:I[3125,["177","static/chunks/app/layout-9f8dab85b7e1a711.js"],"ThemeProvider"]
3:I[5204,[],""]
4:I[408,["197","static/chunks/197-f7c33a0114fc3db3.js","39","static/chunks/app/error-b377c8810901393f.js"],"default"]
5:I[2642,[],""]
6:I[8197,["197","static/chunks/197-f7c33a0114fc3db3.js","345","static/chunks/app/not-found-1772fce496812f30.js"],""]
a:I[3536,[],""]
:HL["/_next/static/css/8698895f11de8509.css","style"]
0:{"P":null,"b":"RnLRg61ihq9Mta-mrOxyM","p":"","c":["","docs","api",""],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","api","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8698895f11de8509.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                try {\n                  const savedTheme = localStorage.getItem('formdown-theme');\n                  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n                  const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');\n                  \n                  if (theme === 'dark') {\n                    document.documentElement.classList.add('dark');\n                    document.body.classList.add('dark');\n                  }\n                } catch (e) {\n                  // Silently fail\n                }\n              })();\n            "}}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"SoftwareApplication\",\"name\":\"Formdown\",\"description\":\"Create beautiful, interactive HTML forms using a simple markdown-like syntax\",\"applicationCategory\":\"DeveloperApplication\",\"operatingSystem\":\"Web Browser\",\"offers\":{\"@type\":\"Offer\",\"price\":\"0\",\"priceCurrency\":\"USD\"},\"creator\":{\"@type\":\"Organization\",\"name\":\"iyulab\",\"url\":\"https://github.com/iyulab\"},\"url\":\"https://formdown.dev\",\"downloadUrl\":\"https://github.com/iyulab/formdown\",\"sameAs\":[\"https://github.com/iyulab/formdown\",\"https://www.npmjs.com/package/@formdown/core\"]}"}}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}]]}],["$","body",null,{"className":"__variable_188709 __variable_9a8899 antialiased","children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center max-w-md mx-auto px-4","children":[["$","h1",null,{"className":"text-6xl font-bold text-blue-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"The page you are looking for might have been removed, had its name changed, or is temporarily unavailable."}],["$","div",null,{"className":"space-x-4","children":[["$","$L6",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors inline-block","children":"Go Home"}],["$","$L6",null,{"href":"/docs","className":"bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-200 transition-colors inline-block","children":"View Docs"}]]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","div",null,{"className":"docs-layout","children":[["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/editor@latest/dist/standalone.js","async":true}],["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/ui@latest/dist/standalone.js","async":true}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}],{"children":[["slug","api","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__","$L7",{},null,false]},null,false]},null,false]},["$L8",[],[]],false],"$L9",false]],"m":"$undefined","G":["$a",[]],"s":false,"S":true}
c:I[433,[],"OutletBoundary"]
e:I[9884,[],"AsyncMetadataOutlet"]
10:I[433,[],"ViewportBoundary"]
12:I[433,[],"MetadataBoundary"]
13:"$Sreact.suspense"
7:["$","$1","c",{"children":["$Lb",null,["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]]}]
8:["$","div","l",{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center","children":[["$","div",null,{"className":"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"}],["$","p",null,{"className":"text-gray-600","children":"Loading Formdown..."}]]}]}]
9:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],null],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
15:I[9435,["197","static/chunks/197-f7c33a0114fc3db3.js","961","static/chunks/961-2418baebae5d6d3e.js","508","static/chunks/app/docs/%5Bslug%5D/page-d841e71b676eff0f.js"],"default"]
16:T629,prose prose-lg max-w-none   prose-headings:text-gray-900 dark:prose-headings:text-white prose-headings:font-semibold   prose-h1:text-2xl prose-h1:border-b prose-h1:border-gray-200 dark:prose-h1:border-gray-700 prose-h1:pb-3 prose-h1:mb-6   prose-h2:text-xl prose-h2:mt-8 prose-h2:mb-4   prose-h3:text-lg prose-h3:mt-6 prose-h3:mb-3   prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed   prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline   prose-strong:text-gray-900 dark:prose-strong:text-white prose-strong:font-semibold   prose-code:text-pink-600 dark:prose-code:text-pink-400 prose-code:bg-pink-50 dark:prose-code:bg-pink-900/30 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm   prose-pre:bg-gray-900 dark:prose-pre:bg-black prose-pre:text-gray-100 dark:prose-pre:text-gray-200 prose-pre:rounded-lg prose-pre:p-4   prose-blockquote:border-l-4 prose-blockquote:border-blue-200 dark:prose-blockquote:border-blue-700 prose-blockquote:bg-blue-50 dark:prose-blockquote:bg-blue-900/20 prose-blockquote:pl-4 prose-blockquote:py-2   prose-ul:my-4 prose-ol:my-4   prose-li:text-gray-700 dark:prose-li:text-gray-300   prose-table:border-collapse prose-table:border prose-table:border-gray-300 dark:prose-table:border-gray-600   prose-th:bg-gray-50 dark:prose-th:bg-gray-800 prose-th:border prose-th:border-gray-300 dark:prose-th:border-gray-600 prose-th:px-3 prose-th:py-2 prose-th:text-left   prose-td:border prose-td:border-gray-300 dark:prose-td:border-gray-600 prose-td:px-3 prose-td:py-217:T1707b,<h2>@formdown/core (Phase 2 Complete)</h2>
<p>The core package provides the <strong>Core-First Architecture</strong> foundation with <strong>FormManager</strong> and <strong>4 Core modules</strong> for complete form lifecycle management.</p>
<h3>FormManager Class</h3>
<p>The <strong>FormManager</strong> is the central API for all form operations in Formdown. It provides complete form lifecycle management with reactive data binding, Core module coordination, and event-driven architecture.</p>
<p><strong>Phase 2 Achievement</strong>: 12+ new methods for UI/Editor integration, 100% Core module utilization.</p>
<h4>Constructor</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">new</span> <span class="token class-name">FormManager</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> FormManagerOptions<span class="token punctuation">)</span>

<span class="token keyword">interface</span> <span class="token class-name">FormManagerOptions</span> <span class="token punctuation">{</span>
  preserveMarkdown<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  fieldPrefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  inlineFieldDelimiter<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  autoGenerateFormIds<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  theme<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
<span class="token punctuation">}</span></code></pre><h4>Core Methods</h4>
<h5><code>parse(content: string): FormdownContent</code></h5>
<p>Parses Formdown content and initializes the form manager with schema and data binding.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>content</code> (string): The Formdown source code</li>
</ul>
<p><strong>Returns:</strong> <code>FormdownContent</code> - Parsed form structure</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'@name*: [placeholder="Enter name"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns parsed content and initializes internal schema</span></code></pre><h4>Core Module APIs (Phase 2 New)</h4>
<h5><code>createFieldProcessor(): FieldProcessor</code></h5>
<p>Creates a FieldProcessor instance for advanced field processing.</p>
<p><strong>Returns:</strong> <code>FieldProcessor</code> - Field processing module</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> processor <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">createFieldProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fieldType <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">extractFieldValue</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>createDOMBinder(): DOMBinder</code></h5>
<p>Creates a DOMBinder instance for DOM manipulation and binding.</p>
<p><strong>Returns:</strong> <code>DOMBinder</code> - DOM binding module  </p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> binder <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">createDOMBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
binder<span class="token punctuation">.</span><span class="token function">setupElementEventHandlers</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
binder<span class="token punctuation">.</span><span class="token function">syncFormData</span><span class="token punctuation">(</span>formData<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>createValidationManager(): ValidationManager</code></h5>
<p>Creates a ValidationManager for advanced validation pipelines.</p>
<p><strong>Returns:</strong> <code>ValidationManager</code> - Validation management module</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> validator <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">createValidationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> validator<span class="token punctuation">.</span><span class="token function">validateAsync</span><span class="token punctuation">(</span>fieldContext<span class="token punctuation">,</span> value<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>createEventOrchestrator(): EventOrchestrator</code></h5>
<p>Creates an EventOrchestrator for component coordination.</p>
<p><strong>Returns:</strong> <code>EventOrchestrator</code> - Event orchestration module</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> orchestrator <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">createEventOrchestrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bridgeId <span class="token operator">=</span> orchestrator<span class="token punctuation">.</span><span class="token function">createCoreUIBridge</span><span class="token punctuation">(</span>coreComponent<span class="token punctuation">,</span> uiComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4>UI/Editor Integration APIs (Phase 2 New)</h4>
<h5><code>renderToTemplate(options?: any): any</code></h5>
<p>Render form to template format for UI components.</p>
<p><strong>Returns:</strong> Structured template data for component rendering</p>
<h5><code>createPreviewTemplate(content: string): any</code></h5>
<p>Create preview template for editor components.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>content</code> (string): Formdown content for preview</li>
</ul>
<p><strong>Returns:</strong> Preview template with HTML, errors, and schema</p>
<h5><code>handleUIEvent(event: Event, domBinder?: DOMBinder): void</code></h5>
<p>Handle UI events from components through Core modules.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>event</code> (Event): DOM event from UI component</li>
<li><code>domBinder</code> (DOMBinder, optional): DOMBinder instance</li>
</ul>
<h5><code>setupComponentBridge(target: any): string</code></h5>
<p>Setup component bridge using EventOrchestrator.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>target</code> (any): Target component for bridge</li>
</ul>
<p><strong>Returns:</strong> Bridge ID for coordination</p>
<h5><code>render(options?: RenderOptions): string</code></h5>
<p>Renders the parsed form to HTML with current data values.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>options</code> (RenderOptions, optional): Rendering options</li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">RenderOptions</span> <span class="token punctuation">{</span>
  theme<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
  customAttributes<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
  outputFormat<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'html'</span> <span class="token operator">|</span> <span class="token string">'json'</span>
<span class="token punctuation">}</span></code></pre><p><strong>Returns:</strong> HTML string or JSON based on output format</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'@email*: @[]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'user@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns HTML with email field pre-filled</span></code></pre><h5><code>getData(): Record&lt;string, any&gt;</code></h5>
<p>Gets current form data with proper value priority (<code>context.data</code> &gt; <code>schema value</code> &gt; <code>empty</code>).</p>
<p><strong>Returns:</strong> Current form data object</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: "John", email: "john@example.com" }</span></code></pre><h5><code>setFieldValue(field: string, value: any): void</code></h5>
<p>Sets a single field value and triggers data change events.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>field</code> (string): Field name</li>
<li><code>value</code> (any): Value to set</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">manager<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Triggers 'data-change' event automatically</span></code></pre><h5><code>updateData(newData: Record&lt;string, any&gt;): void</code></h5>
<p>Updates multiple form fields at once.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>newData</code> (Record&lt;string, any&gt;): Object with field values to update</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">manager<span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jane Smith'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'jane@example.com'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>validate(): ValidationResult</code></h5>
<p>Validates current form data against the schema.</p>
<p><strong>Returns:</strong> <code>ValidationResult</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ValidationResult</span> <span class="token punctuation">{</span>
  isValid<span class="token operator">:</span> <span class="token builtin">boolean</span>
  errors<span class="token operator">:</span> FieldError<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FieldError</span> <span class="token punctuation">{</span>
  field<span class="token operator">:</span> <span class="token builtin">string</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Validation errors:'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><h5><code>getSchema(): FormDownSchema | null</code></h5>
<p>Gets the extracted form schema.</p>
<p><strong>Returns:</strong> Schema object or null if no form is parsed</p>
<h5><code>reset(): void</code></h5>
<p>Resets form data to schema defaults and emits reset event.</p>
<h5><code>isDirty(): boolean</code></h5>
<p>Checks if form has unsaved changes from defaults.</p>
<p><strong>Returns:</strong> <code>true</code> if form data has changed from defaults</p>
<h4>Event System</h4>
<p>FormManager provides an event-driven architecture for reactive form interactions.</p>
<h5><code>on&lt;K extends keyof FormManagerEvents&gt;(event: K, handler: Function): void</code></h5>
<p>Subscribes to form events.</p>
<p><strong>Events:</strong></p>
<ul>
<li><code>data-change</code>: Fired when field values change</li>
<li><code>validation-error</code>: Fired when validation fails</li>
<li><code>form-submit</code>: Fired on form submission</li>
<li><code>form-reset</code>: Fired when form is reset</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data-change'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> field<span class="token punctuation">,</span> value<span class="token punctuation">,</span> formData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Field </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> changed to:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Current form data:'</span><span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'validation-error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> field<span class="token punctuation">,</span> errors <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Validation failed for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>off&lt;K extends keyof FormManagerEvents&gt;(event: K, handler: Function): void</code></h5>
<p>Unsubscribes from form events.</p>
<h4>Utility Methods</h4>
<h5><code>getField(fieldName: string): Field | null</code></h5>
<p>Gets field definition by name.</p>
<h5><code>getFields(): Field[]</code></h5>
<p>Gets all form fields.</p>
<h5><code>getDefaultValues(): Record&lt;string, any&gt;</code></h5>
<p>Gets default values from schema.</p>
<h5><code>clone(): FormManager</code></h5>
<p>Creates a new FormManager instance with same options.</p>
<h5><code>export(): FormManagerExport</code></h5>
<p>Exports form configuration for serialization.</p>
<h5><code>import(config: FormManagerImport): void</code></h5>
<p>Imports form configuration.</p>
<h3>FormDataBinding Class</h3>
<p><strong>FormDataBinding</strong> provides reactive data management with schema-driven defaults and validation.</p>
<h4>Constructor</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">new</span> <span class="token class-name">FormDataBinding</span><span class="token punctuation">(</span>schema<span class="token operator">?</span><span class="token operator">:</span> FormDownSchema<span class="token punctuation">,</span> initialData<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">)</span></code></pre><h4>Core Methods</h4>
<h5><code>set(field: string, value: any): void</code></h5>
<p>Sets a field value with change detection.</p>
<h5><code>get(field: string): any</code></h5>
<p>Gets a field value with priority: <code>current data</code> &gt; <code>schema default</code> &gt; <code>undefined</code>.</p>
<h5><code>getAll(): Record&lt;string, any&gt;</code></h5>
<p>Gets all form data merging schema defaults with current values.</p>
<h5><code>updateAll(newData: Record&lt;string, any&gt;): void</code></h5>
<p>Updates multiple fields atomically.</p>
<h5><code>reset(): void</code></h5>
<p>Resets to schema defaults.</p>
<h5><code>validate(): ValidationResult</code></h5>
<p>Validates all fields against schema.</p>
<h5><code>isDirty(): boolean</code></h5>
<p>Checks if data differs from schema defaults.</p>
<h5><code>subscribe(listener: ChangeListener): () =&gt; void</code></h5>
<p>Subscribes to data changes. Returns unsubscribe function.</p>
<h5><code>subscribeToField(listener: FieldChangeListener): () =&gt; void</code></h5>
<p>Subscribes to specific field changes.</p>
<h3>Convenience Functions</h3>
<h4><code>createFormManager(content: string, options?: FormManagerOptions): FormManager</code></h4>
<p>Creates and initializes a FormManager in one call.</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFormManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token function">createFormManager</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  @name*: [placeholder="Enter name"]
  @email*: @[]
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: "", email: "" }</span></code></pre><h4><code>renderForm(content: string, data?: Record&lt;string, any&gt;, options?: FormManagerOptions &amp; RenderOptions): string</code></h4>
<p>One-time form rendering convenience function.</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> renderForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">renderForm</span><span class="token punctuation">(</span>
  <span class="token string">'@name*: [placeholder="Enter name"]'</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Doe'</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns HTML with name field pre-filled</span></code></pre><h3>Core Functions</h3>
<h4><code>parseFormdown(input: string): FormdownContent</code></h4>
<p>Parses Formdown syntax into structured data containing both form fields and markdown content.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>input</code> (string): The Formdown source code</li>
</ul>
<p><strong>Returns:</strong> <code>FormdownContent</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FormdownContent</span> <span class="token punctuation">{</span>
  markdown<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// Processed markdown with field placeholders</span>
  forms<span class="token operator">:</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Parsed form fields</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> parseFormdown <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">parseFormdown</span><span class="token punctuation">(</span><span class="token string">'@name: [text required]\n\n# Contact Form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: { markdown: "&lt;!--FORMDOWN_FIELD_0-->\n\n# Contact Form", forms: [...] }</span></code></pre><h4><code>generateFormHTML(content: FormdownContent): string</code></h4>
<p>Generates complete HTML including forms and markdown content.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>content</code> (FormdownContent): Parsed formdown content</li>
</ul>
<p><strong>Returns:</strong> HTML string</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> parseFormdown<span class="token punctuation">,</span> generateFormHTML <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token function">parseFormdown</span><span class="token punctuation">(</span><span class="token string">'@name: [text required]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">generateFormHTML</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: Complete HTML with form and markdown</span></code></pre><h4><code>getSchema(content: string): FormDownSchema</code></h4>
<p>Extracts structured schema metadata from Formdown content.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>content</code> (string): The Formdown source code</li>
</ul>
<p><strong>Returns:</strong> <code>FormDownSchema</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FormDownSchema</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>fieldName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> FieldSchema<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FieldSchema</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> FieldType<span class="token punctuation">;</span>
  label<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  required<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  position<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  validation<span class="token operator">?</span><span class="token operator">:</span> ValidationRules<span class="token punctuation">;</span>
  htmlAttributes<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span>
  layout<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'inline'</span> <span class="token operator">|</span> <span class="token string">'vertical'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> getSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">getSchema</span><span class="token punctuation">(</span><span class="token string">'@name: [text required minlength=2]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: { name: { type: 'text', required: true, validation: { minlength: 2 } } }</span></code></pre><h3>FormdownFieldHelper</h3>
<p><strong>FormdownFieldHelper</strong> provides a predictable and rational API for interacting with Formdown form fields. It automatically handles &quot;other&quot; options across all field types and provides a consistent interface for getting and setting field values.</p>
<h4>Core Methods</h4>
<h5><code>get(fieldName: string, form?: HTMLFormElement): FieldValue</code></h5>
<p>Gets the current value(s) of a field.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>form</code> (HTMLFormElement, optional): Form element to search in</li>
</ul>
<p><strong>Returns:</strong> </p>
<ul>
<li>String for single-value fields (radio, select, text)</li>
<li>String array for checkbox fields</li>
<li><code>null</code> if field not found</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormdownFieldHelper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token comment">// Radio/Select: single value</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">)</span>  <span class="token comment">// → "Medium" | null</span>

<span class="token comment">// Checkbox: array of values</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">)</span>    <span class="token comment">// → ["JavaScript", "Rust"] | []</span>

<span class="token comment">// Text: string value</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>      <span class="token comment">// → "John Doe" | null</span></code></pre><h5><code>set(fieldName: string, value: string | string[], options?: FieldHelperOptions): boolean</code></h5>
<p>Sets field value(s). Automatically uses &quot;other&quot; option for values not in predefined options.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>value</code> (string | string[]): Value to set</li>
<li><code>options</code> (FieldHelperOptions, optional): Configuration options</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Success status</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Set existing option</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">)</span>     <span class="token comment">// → true</span>

<span class="token comment">// Set other option (automatically detected)</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'Urgent'</span><span class="token punctuation">)</span>   <span class="token comment">// → true (uses other option)</span>

<span class="token comment">// Set checkbox values</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'CustomSkill'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// → true</span>

<span class="token comment">// Set text field</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'John Doe'</span><span class="token punctuation">)</span>     <span class="token comment">// → true</span></code></pre><h5><code>clear(fieldName: string, options?: FieldHelperOptions): boolean</code></h5>
<p>Clears all values from a field.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>options</code> (FieldHelperOptions, optional): Configuration options</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Success status</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">)</span>  <span class="token comment">// → true</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">)</span>    <span class="token comment">// → true (clears all checkboxes)</span></code></pre><h5><code>has(fieldName: string, value: string, form?: HTMLFormElement): boolean</code></h5>
<p>Checks if a field has a specific value.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>value</code> (string): Value to check for</li>
<li><code>form</code> (HTMLFormElement, optional): Form element to search in</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Whether the field has the value</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">)</span>     <span class="token comment">// → true/false</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">)</span> <span class="token comment">// → true/false (searches in array)</span></code></pre><h4>Checkbox-Specific Methods</h4>
<h5><code>add(fieldName: string, value: string, options?: FieldHelperOptions): boolean</code></h5>
<p>Adds a value to a checkbox field while preserving existing selections.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the checkbox field</li>
<li><code>value</code> (string): Value to add</li>
<li><code>options</code> (FieldHelperOptions, optional): Configuration options</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Success status</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>     <span class="token comment">// Add to existing selections</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'CustomSkill'</span><span class="token punctuation">)</span> <span class="token comment">// Add as other option</span></code></pre><h5><code>remove(fieldName: string, value: string, options?: FieldHelperOptions): boolean</code></h5>
<p>Removes a specific value from a checkbox field.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the checkbox field</li>
<li><code>value</code> (string): Value to remove</li>
<li><code>options</code> (FieldHelperOptions, optional): Configuration options</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Success status</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">)</span>  <span class="token comment">// Remove specific value</span></code></pre><h5><code>toggle(fieldName: string, value: string, options?: FieldHelperOptions): boolean</code></h5>
<p>Toggles a value in a checkbox field (add if not present, remove if present).</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the checkbox field</li>
<li><code>value</code> (string): Value to toggle</li>
<li><code>options</code> (FieldHelperOptions, optional): Configuration options</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Success status</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>  <span class="token comment">// Add or remove based on current state</span></code></pre><h4>Utility Methods</h4>
<h5><code>getFieldType(fieldName: string, form?: HTMLFormElement): FormFieldType</code></h5>
<p>Gets the type of a field.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>form</code> (HTMLFormElement, optional): Form element to search in</li>
</ul>
<p><strong>Returns:</strong> <code>FormFieldType</code> - Field type (&#39;radio&#39; | &#39;checkbox&#39; | &#39;select&#39; | &#39;text&#39; | &#39;textarea&#39; | &#39;unknown&#39;)</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">)</span>  <span class="token comment">// → 'radio'</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">getFieldType</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">)</span>    <span class="token comment">// → 'checkbox'</span></code></pre><h5><code>isOtherValue(fieldName: string, value: string, form?: HTMLFormElement): boolean</code></h5>
<p>Checks if a value would be treated as an &quot;other&quot; option.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Name of the field</li>
<li><code>value</code> (string): Value to check</li>
<li><code>form</code> (HTMLFormElement, optional): Form element to search in</li>
</ul>
<p><strong>Returns:</strong> <code>boolean</code> - Whether the value would use the &quot;other&quot; option</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">isOtherValue</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'High'</span><span class="token punctuation">)</span>    <span class="token comment">// → false (existing option)</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">isOtherValue</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'Urgent'</span><span class="token punctuation">)</span>  <span class="token comment">// → true (other option)</span></code></pre><h4>Options Configuration</h4>
<h5><code>FieldHelperOptions</code></h5>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FieldHelperOptions</span> <span class="token punctuation">{</span>
    silent<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>        <span class="token comment">// Suppress console warnings (default: false)</span>
    dispatchEvents<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// Dispatch change/input events (default: true)</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript">FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'Urgent'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">silent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">// No warning messages</span>
    <span class="token literal-property property">dispatchEvents</span><span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token comment">// Don't trigger events</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr>
<h2>@formdown/ui (Phase 2.1 Complete)</h2>
<p>The UI package provides web components for rendering Formdown content as interactive forms with <strong>100% Core module integration</strong>.</p>
<p><strong>Phase 2.1 Achievement</strong>: 1307 lines → 1186 lines (9.3% optimization), complete FormManager delegation, DOMBinder integration.</p>
<h3><code>&lt;formdown-ui&gt;</code> Web Component</h3>
<p>A custom element that renders Formdown source as interactive forms with Core-powered validation and data management.</p>
<h4>Attributes</h4>
<ul>
<li><code>content</code> (string): The Formdown source content</li>
<li><code>form-id</code> (string): ID for the generated form</li>
<li><code>show-submit-button</code> (boolean): Show/hide submit button</li>
<li><code>submit-text</code> (string): Text for submit button</li>
<li><code>select-on-focus</code> (boolean): Select text on focus</li>
</ul>
<h4>Properties</h4>
<ul>
<li><code>data</code> (Record&lt;string, any&gt;): Reactive data property that syncs with internal FormManager</li>
</ul>
<h4>Methods</h4>
<h5><code>validate(): ValidationResult</code></h5>
<p>Validates all form fields and returns validation results with visual feedback.</p>
<p><strong>Returns:</strong> <code>ValidationResult</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ValidationResult</span> <span class="token punctuation">{</span>
  isValid<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  errors<span class="token operator">:</span> FieldError<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> formdownUI <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-ui'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> validation <span class="token operator">=</span> formdownUI<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Validation errors:'</span><span class="token punctuation">,</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Fields with errors will be visually highlighted</span>
<span class="token punctuation">}</span></code></pre><h5><code>getFormData(): Record&lt;string, any&gt;</code></h5>
<p>Gets current form data.</p>
<p><strong>Returns:</strong> Current form data object</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> formdownUI <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-ui'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> formdownUI<span class="token punctuation">.</span><span class="token function">getFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form data:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>updateData(newData: Record&lt;string, any&gt;): void</code></h5>
<p>Updates form data.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>newData</code> (Record&lt;string, any&gt;): Data to update</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> formdownUI <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-ui'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formdownUI<span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Doe'</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'john@example.com'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>updateField(fieldName: string, value: any): void</code></h5>
<p>Updates a single field.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>fieldName</code> (string): Field name</li>
<li><code>value</code> (any): Field value</li>
</ul>
<h5><code>reset(): void</code></h5>
<p>Resets the form to schema defaults.</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> formdownUI <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-ui'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formdownUI<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5><code>isDirty(): boolean</code></h5>
<p>Checks if form has unsaved changes.</p>
<p><strong>Returns:</strong> <code>true</code> if form data has changed from defaults</p>
<h5><code>getSchema(): FormDownSchema | null</code></h5>
<p>Gets the form schema.</p>
<p><strong>Returns:</strong> Schema object or null</p>
<h4>Events</h4>
<ul>
<li><code>formdown-change</code>: Fired when field values change</li>
<li><code>formdown-data-update</code>: Fired when form data updates</li>
<li><code>validation-error</code>: Fired when validation fails</li>
<li><code>form-submit</code>: Fired on form submission</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formdown-ui</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@name: [text required]
@email: [email required]
@age: [number min=18]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formdown-ui</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-ui'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Listen for changes</span>
form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'formdown-change'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Field changed:'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Validate form</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'validate-btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form is valid!'</span><span class="token punctuation">,</span> form<span class="token punctuation">.</span><span class="token function">getFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3>Utility Functions</h3>
<h4><code>createFormdownUI(container: HTMLElement, options?: UIOptions): FormdownUI</code></h4>
<p>Creates and appends a FormdownUI component to a container.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>container</code> (HTMLElement): Container to append to</li>
<li><code>options</code> (UIOptions, optional): Configuration options</li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UIOptions</span> <span class="token punctuation">{</span>
  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  formId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  showSubmitButton<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  submitText<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFormdownUI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/ui'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">createFormdownUI</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form-container'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'@name: [text required]'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showSubmitButton</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">submitText</span><span class="token operator">:</span> <span class="token string">'Submit Form'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr>
<h2>@formdown/editor (Phase 2.2 Complete)</h2>
<p>The editor package provides a live editor component with <strong>100% Core module integration</strong> and real-time Core-powered preview capabilities.</p>
<p><strong>Phase 2.2 Achievement</strong>: Complete EventOrchestrator integration, legacy code elimination, template consolidation (505 lines + templates.ts removal).</p>
<h3><code>&lt;formdown-editor&gt;</code> Web Component</h3>
<p>A live editor with Core-powered real-time preview, FormManager data management, and EventOrchestrator coordination.</p>
<h4>Attributes</h4>
<ul>
<li><code>content</code> (string): Initial Formdown content</li>
<li><code>mode</code> (&quot;edit&quot; | &quot;split&quot; | &quot;view&quot;): Display mode (default: &quot;split&quot;)</li>
<li><code>placeholder</code> (string): Placeholder text for editor</li>
<li><code>header</code> (boolean): Show header bar</li>
<li><code>toolbar</code> (boolean): Show toolbar</li>
</ul>
<h4>Properties</h4>
<ul>
<li><code>data</code> (Record&lt;string, any&gt;): Form data that syncs with preview</li>
</ul>
<h4>Methods</h4>
<h5><code>validate(): ValidationResult</code></h5>
<p>Validates the form in the preview panel.</p>
<p><strong>Returns:</strong> <code>ValidationResult</code></p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> editor <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-editor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> validation <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form validation failed:'</span><span class="token punctuation">,</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Preview panel will show visual validation feedback</span>
<span class="token punctuation">}</span></code></pre><h5><code>getFormData(): Record&lt;string, any&gt;</code></h5>
<p>Gets current form data from the preview panel.</p>
<p><strong>Returns:</strong> Current form data object</p>
<p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> editor <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-editor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Current form data:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4>Events</h4>
<ul>
<li><code>formdown-change</code>: Fired when content changes</li>
<li><code>formdown-data-update</code>: Fired when preview form data changes</li>
</ul>
<p><strong>Example:</strong></p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formdown-editor</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>split<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  @name: [text required placeholder="Enter your name"]
  @email: [email required]
  @age: [number min=18 max=120]
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formdown-editor</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> editor <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'formdown-editor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Validate the form in preview</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'validate-btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Validation result:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get form data</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'get-data-btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form data:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3>Utility Functions</h3>
<h4><code>createFormdownEditor(container: HTMLElement, options?: EditorOptions): FormdownEditor</code></h4>
<p>Creates and appends a FormdownEditor component to a container.</p>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>container</code> (HTMLElement): Container to append to</li>
<li><code>options</code> (EditorOptions, optional): Configuration options</li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">EditorOptions</span> <span class="token punctuation">{</span>
  content<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  showPreview<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  showToolbar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  placeholder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span></code></pre><p><strong>Example:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFormdownEditor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/editor'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token function">createFormdownEditor</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'editor-container'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'@name: [text required]'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showPreview</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showToolbar</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr>
<h2>Type Definitions</h2>
<h3>Core Types</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Field</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  type<span class="token operator">:</span> FieldType
  label<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  required<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  placeholder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  attributes<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
  validation<span class="token operator">?</span><span class="token operator">:</span> ValidationRules
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  allowOther<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">FieldType</span> <span class="token operator">=</span> 
  <span class="token operator">|</span> <span class="token string">'text'</span> <span class="token operator">|</span> <span class="token string">'email'</span> <span class="token operator">|</span> <span class="token string">'password'</span> <span class="token operator">|</span> <span class="token string">'tel'</span> <span class="token operator">|</span> <span class="token string">'url'</span> <span class="token operator">|</span> <span class="token string">'number'</span>
  <span class="token operator">|</span> <span class="token string">'date'</span> <span class="token operator">|</span> <span class="token string">'time'</span> <span class="token operator">|</span> <span class="token string">'datetime-local'</span> <span class="token operator">|</span> <span class="token string">'month'</span> <span class="token operator">|</span> <span class="token string">'week'</span>
  <span class="token operator">|</span> <span class="token string">'textarea'</span> <span class="token operator">|</span> <span class="token string">'select'</span> <span class="token operator">|</span> <span class="token string">'radio'</span> <span class="token operator">|</span> <span class="token string">'checkbox'</span> <span class="token operator">|</span> <span class="token string">'file'</span>
  <span class="token operator">|</span> <span class="token string">'color'</span> <span class="token operator">|</span> <span class="token string">'range'</span> <span class="token operator">|</span> <span class="token string">'search'</span> <span class="token operator">|</span> <span class="token string">'hidden'</span> <span class="token operator">|</span> <span class="token string">'button'</span>
  <span class="token operator">|</span> <span class="token string">'submit'</span> <span class="token operator">|</span> <span class="token string">'reset'</span>

<span class="token keyword">interface</span> <span class="token class-name">ValidationRules</span> <span class="token punctuation">{</span>
  min<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>
  max<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>
  minlength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  maxlength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  step<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  pattern<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  accept<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FieldError</span> <span class="token punctuation">{</span>
  field<span class="token operator">:</span> <span class="token builtin">string</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ValidationResult</span> <span class="token punctuation">{</span>
  isValid<span class="token operator">:</span> <span class="token builtin">boolean</span>
  errors<span class="token operator">:</span> FieldError<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FormDownSchema</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>fieldName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> FieldSchema
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FieldSchema</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> FieldType
  label<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  required<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span>
  position<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  validation<span class="token operator">?</span><span class="token operator">:</span> ValidationRules
  htmlAttributes<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
  layout<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'inline'</span> <span class="token operator">|</span> <span class="token string">'vertical'</span>
<span class="token punctuation">}</span></code></pre><hr>
<h2>Migration Guide</h2>
<h3>From Legacy Functions to FormManager</h3>
<p>The new FormManager API provides enhanced functionality while maintaining backward compatibility:</p>
<p><strong>Legacy approach:</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> parseFormdown<span class="token punctuation">,</span> generateFormHTML <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token function">parseFormdown</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">generateFormHTML</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Modern approach (recommended):</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Plus: reactive data binding, events, validation, etc.</span></code></pre><h3>Benefits of FormManager</h3>
<ol>
<li><strong>Reactive Data Binding</strong>: Automatic synchronization between form data and UI</li>
<li><strong>Event-Driven Architecture</strong>: Subscribe to form events for real-time updates</li>
<li><strong>Built-in Validation</strong>: Schema-based validation with error handling</li>
<li><strong>State Management</strong>: Track dirty state, reset to defaults, export/import configuration</li>
<li><strong>Type Safety</strong>: Full TypeScript support with comprehensive type definitions</li>
</ol>
<hr>
<h2>Best Practices</h2>
<h3>1. Use FormManager for Interactive Forms</h3>
<p>For forms that require user interaction, validation, or data management:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manager<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>formContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set up event listeners</span>
manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data-change'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> field<span class="token punctuation">,</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Field </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> changed to:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Render with current data</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3>2. Use FormdownFieldHelper for DOM Manipulation</h3>
<p>When working with rendered forms in the browser:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormdownFieldHelper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span><span class="token punctuation">;</span>

<span class="token comment">// Get values</span>
<span class="token keyword">const</span> priority <span class="token operator">=</span> FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set values (handles "other" options automatically)</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'Custom Skill'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check specific values</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'skills'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Python is selected</span>
<span class="token punctuation">}</span></code></pre><h3>3. Validate Before Submission</h3>
<p>Always validate form data before processing:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> validation <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  validation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Process valid data...</span></code></pre><h3>4. Handle &quot;Other&quot; Options Consistently</h3>
<p>The FormdownFieldHelper automatically handles &quot;other&quot; options:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Formdown syntax with other option</span>
<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'@priority{Low,Medium,High,*(Custom Priority)}: r[]'</span><span class="token punctuation">;</span>

<span class="token comment">// Setting a custom value automatically uses the other option</span>
FormdownFieldHelper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'priority'</span><span class="token punctuation">,</span> <span class="token string">'Urgent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uses "Custom Priority" option</span></code></pre><h3>5. Use Web Components for Quick Integration</h3>
<p>For rapid prototyping or simple integrations:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Include the UI component --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@formdown/ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Use directly in HTML --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formdown-ui</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@name: [text required]
@email: [email required]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formdown-ui</span><span class="token punctuation">></span></span></code></pre>b:["$","$L15",null,{"currentSlug":"api","children":["$","div",null,{"children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900 dark:text-white mb-6","children":"API Reference"}],["$","article",null,{"className":"$16","dangerouslySetInnerHTML":{"__html":"$17"}}]]}]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
18:I[6644,[],"IconMark"]
f:{"metadata":[["$","title","0",{"children":"Formdown - Markdown-based Form Builder"}],["$","meta","1",{"name":"description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","2",{"name":"author","content":"iyulab"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","meta","4",{"name":"keywords","content":"form builder,markdown forms,html forms,form generator,web forms,interactive forms,form validation,formdown,javascript forms,typescript forms"}],["$","meta","5",{"name":"creator","content":"iyulab"}],["$","meta","6",{"name":"publisher","content":"iyulab"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://formdown.dev/"}],["$","meta","10",{"property":"og:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","11",{"property":"og:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","12",{"property":"og:url","content":"https://formdown.dev/"}],["$","meta","13",{"property":"og:site_name","content":"Formdown"}],["$","meta","14",{"property":"og:locale","content":"en_US"}],["$","meta","15",{"property":"og:image","content":"https://formdown.dev/logo.png"}],["$","meta","16",{"property":"og:image:width","content":"1200"}],["$","meta","17",{"property":"og:image:height","content":"630"}],["$","meta","18",{"property":"og:image:alt","content":"Formdown - Markdown-based Form Builder"}],["$","meta","19",{"property":"og:type","content":"website"}],["$","meta","20",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","21",{"name":"twitter:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","22",{"name":"twitter:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax."}],["$","meta","23",{"name":"twitter:image","content":"https://formdown.dev/logo.png"}],["$","link","24",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$L18","25",{}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
