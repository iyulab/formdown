1:"$Sreact.fragment"
2:I[3125,["177","static/chunks/app/layout-9f8dab85b7e1a711.js"],"ThemeProvider"]
3:I[5204,[],""]
4:I[408,["197","static/chunks/197-f7c33a0114fc3db3.js","39","static/chunks/app/error-b377c8810901393f.js"],"default"]
5:I[2642,[],""]
6:I[8197,["197","static/chunks/197-f7c33a0114fc3db3.js","345","static/chunks/app/not-found-1772fce496812f30.js"],""]
a:I[3536,[],""]
:HL["/_next/static/css/8698895f11de8509.css","style"]
0:{"P":null,"b":"zvNI4XTprodWKz2QAX56A","p":"","c":["","docs","extensions",""],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","extensions","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8698895f11de8509.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                try {\n                  const savedTheme = localStorage.getItem('formdown-theme');\n                  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n                  const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');\n                  \n                  if (theme === 'dark') {\n                    document.documentElement.classList.add('dark');\n                    document.body.classList.add('dark');\n                  }\n                } catch (e) {\n                  // Silently fail\n                }\n              })();\n            "}}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"SoftwareApplication\",\"name\":\"Formdown\",\"description\":\"Create beautiful, interactive HTML forms using a simple markdown-like syntax\",\"applicationCategory\":\"DeveloperApplication\",\"operatingSystem\":\"Web Browser\",\"offers\":{\"@type\":\"Offer\",\"price\":\"0\",\"priceCurrency\":\"USD\"},\"creator\":{\"@type\":\"Organization\",\"name\":\"iyulab\",\"url\":\"https://github.com/iyulab\"},\"url\":\"https://formdown.dev\",\"downloadUrl\":\"https://github.com/iyulab/formdown\",\"sameAs\":[\"https://github.com/iyulab/formdown\",\"https://www.npmjs.com/package/@formdown/core\"]}"}}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}]]}],["$","body",null,{"className":"__variable_188709 __variable_9a8899 antialiased","children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$4","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center max-w-md mx-auto px-4","children":[["$","h1",null,{"className":"text-6xl font-bold text-blue-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-bold text-gray-900 mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"The page you are looking for might have been removed, had its name changed, or is temporarily unavailable."}],["$","div",null,{"className":"space-x-4","children":[["$","$L6",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors inline-block","children":"Go Home"}],["$","$L6",null,{"href":"/docs","className":"bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-semibold hover:bg-gray-200 transition-colors inline-block","children":"View Docs"}]]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","div",null,{"className":"docs-layout","children":[["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/editor@latest/dist/standalone.js","async":true}],["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/@formdown/ui@latest/dist/standalone.js","async":true}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]]}],{"children":[["slug","extensions","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__","$L7",{},null,false]},null,false]},null,false]},["$L8",[],[]],false],"$L9",false]],"m":"$undefined","G":["$a",[]],"s":false,"S":true}
c:I[433,[],"OutletBoundary"]
e:I[9884,[],"AsyncMetadataOutlet"]
10:I[433,[],"ViewportBoundary"]
12:I[433,[],"MetadataBoundary"]
13:"$Sreact.suspense"
7:["$","$1","c",{"children":["$Lb",null,["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]]}]
8:["$","div","l",{"className":"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center","children":[["$","div",null,{"className":"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"}],["$","p",null,{"className":"text-gray-600","children":"Loading Formdown..."}]]}]}]
9:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],null],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
15:I[9435,["197","static/chunks/197-f7c33a0114fc3db3.js","961","static/chunks/961-2418baebae5d6d3e.js","508","static/chunks/app/docs/%5Bslug%5D/page-d841e71b676eff0f.js"],"default"]
16:T629,prose prose-lg max-w-none   prose-headings:text-gray-900 dark:prose-headings:text-white prose-headings:font-semibold   prose-h1:text-2xl prose-h1:border-b prose-h1:border-gray-200 dark:prose-h1:border-gray-700 prose-h1:pb-3 prose-h1:mb-6   prose-h2:text-xl prose-h2:mt-8 prose-h2:mb-4   prose-h3:text-lg prose-h3:mt-6 prose-h3:mb-3   prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed   prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline   prose-strong:text-gray-900 dark:prose-strong:text-white prose-strong:font-semibold   prose-code:text-pink-600 dark:prose-code:text-pink-400 prose-code:bg-pink-50 dark:prose-code:bg-pink-900/30 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm   prose-pre:bg-gray-900 dark:prose-pre:bg-black prose-pre:text-gray-100 dark:prose-pre:text-gray-200 prose-pre:rounded-lg prose-pre:p-4   prose-blockquote:border-l-4 prose-blockquote:border-blue-200 dark:prose-blockquote:border-blue-700 prose-blockquote:bg-blue-50 dark:prose-blockquote:bg-blue-900/20 prose-blockquote:pl-4 prose-blockquote:py-2   prose-ul:my-4 prose-ol:my-4   prose-li:text-gray-700 dark:prose-li:text-gray-300   prose-table:border-collapse prose-table:border prose-table:border-gray-300 dark:prose-table:border-gray-600   prose-th:bg-gray-50 dark:prose-th:bg-gray-800 prose-th:border prose-th:border-gray-300 dark:prose-th:border-gray-600 prose-th:px-3 prose-th:py-2 prose-th:text-left   prose-td:border prose-td:border-gray-300 dark:prose-td:border-gray-600 prose-td:px-3 prose-td:py-217:T12911,<p>The Formdown Extension System provides a comprehensive plugin architecture that allows developers to extend and customize every aspect of Formdown&#39;s functionality. This system is built on a hook-based architecture with type-safe interfaces and robust error handling.</p>
<h2>Quick Start</h2>
<h3>Basic Plugin Registration</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>

<span class="token comment">// Create and initialize extension manager</span>
<span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Register a simple plugin</span>
<span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'my-plugin'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">'A custom field type plugin'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  fieldTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'rating'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">parser</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Custom parsing logic</span>
      <span class="token keyword">return</span> parsedField
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Custom HTML generation</span>
      <span class="token keyword">return</span> <span class="token string">'&lt;div class="rating">...&lt;/div>'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span></code></pre><h3>Using Hooks</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>

<span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Register a custom hook</span>
<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'pre-parse'</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
  priority<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Transform input before parsing</span>
    <span class="token keyword">return</span> transformedInput
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

extensionManager<span class="token punctuation">.</span><span class="token function">registerHook</span><span class="token punctuation">(</span>hook<span class="token punctuation">)</span></code></pre><h2>Core Concepts</h2>
<h3>Extension Manager</h3>
<p>The <code>ExtensionManager</code> is the central coordinator that manages:</p>
<ul>
<li><strong>Plugin Registration</strong>: Loading and initializing plugins</li>
<li><strong>Hook Execution</strong>: Coordinating hook-based extensions</li>
<li><strong>Event System</strong>: Publishing and subscribing to extension events</li>
<li><strong>Lifecycle Management</strong>: Plugin initialization and cleanup</li>
</ul>
<h3>Hooks</h3>
<p>Hooks are execution points where plugins can inject custom behavior:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">HookName</span> <span class="token operator">=</span> 
  <span class="token operator">|</span> <span class="token string">'pre-parse'</span>      <span class="token comment">// Before parsing input</span>
  <span class="token operator">|</span> <span class="token string">'post-parse'</span>     <span class="token comment">// After parsing fields</span>
  <span class="token operator">|</span> <span class="token string">'field-parse'</span>    <span class="token comment">// When parsing individual fields</span>
  <span class="token operator">|</span> <span class="token string">'field-validate'</span> <span class="token comment">// When validating field values</span>
  <span class="token operator">|</span> <span class="token string">'pre-generate'</span>   <span class="token comment">// Before HTML generation</span>
  <span class="token operator">|</span> <span class="token string">'post-generate'</span>  <span class="token comment">// After HTML generation</span>
  <span class="token operator">|</span> <span class="token string">'field-render'</span>   <span class="token comment">// When rendering individual fields</span>
  <span class="token operator">|</span> <span class="token string">'error-handle'</span>   <span class="token comment">// When handling errors</span></code></pre><h3>Plugins</h3>
<p>Plugins are collections of extensions that can include:</p>
<ul>
<li><strong>Field Types</strong>: Custom field type definitions</li>
<li><strong>Validators</strong>: Custom validation logic</li>
<li><strong>Renderers</strong>: Custom HTML generators</li>
<li><strong>Hooks</strong>: Event handlers for various stages</li>
<li><strong>Themes</strong>: Visual styling extensions</li>
</ul>
<h2>Hook System</h2>
<h3>Hook Types and Contexts</h3>
<p>Each hook type receives and returns specific context data:</p>
<h4>pre-parse</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PreParseContext</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span>
  options<span class="token operator">:</span> ParseOptions
<span class="token punctuation">}</span>
<span class="token comment">// Transform or validate input before parsing</span></code></pre><h4>post-parse</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PostParseContext</span> <span class="token punctuation">{</span>
  fields<span class="token operator">:</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span>
  forms<span class="token operator">:</span> FormDeclaration<span class="token punctuation">[</span><span class="token punctuation">]</span>
  metadata<span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
<span class="token comment">// Modify parsed results</span></code></pre><h4>field-parse</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FieldParseContext</span> <span class="token punctuation">{</span>
  match<span class="token operator">:</span> RegExpMatchArray
  type<span class="token operator">:</span> <span class="token builtin">string</span>
  fieldName<span class="token operator">:</span> <span class="token builtin">string</span>
  attributes<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
<span class="token punctuation">}</span>
<span class="token comment">// Custom field parsing logic</span></code></pre><h4>field-validate</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FieldValidateContext</span> <span class="token punctuation">{</span>
  field<span class="token operator">:</span> Field
  value<span class="token operator">:</span> <span class="token builtin">any</span>
  formData<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span>
  errors<span class="token operator">:</span> ValidationError<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// Add custom validation</span></code></pre><h4>pre-generate</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PreGenerateContext</span> <span class="token punctuation">{</span>
  fields<span class="token operator">:</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span>
  options<span class="token operator">:</span> GenerateOptions
  theme<span class="token operator">:</span> ThemeConfig
<span class="token punctuation">}</span>
<span class="token comment">// Modify fields before generation</span></code></pre><h4>post-generate</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PostGenerateContext</span> <span class="token punctuation">{</span>
  html<span class="token operator">:</span> <span class="token builtin">string</span>
  fields<span class="token operator">:</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span>
  scripts<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  styles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// Transform final HTML output</span></code></pre><h3>Hook Priority and Execution</h3>
<p>Hooks execute in priority order (lower numbers first):</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'pre-parse'</span><span class="token punctuation">,</span>
  priority<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">// Executes before priority 20</span>
  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Your logic here</span>
    <span class="token keyword">return</span> modifiedContext
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><p>Default priorities:</p>
<ul>
<li>System hooks: 0-99</li>
<li>Plugin hooks: 100-999</li>
<li>User hooks: 1000+</li>
</ul>
<h2>Plugin Development</h2>
<h3>Plugin Structure</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> PluginMetadata
  hooks<span class="token operator">?</span><span class="token operator">:</span> Hook<span class="token punctuation">[</span><span class="token punctuation">]</span>
  fieldTypes<span class="token operator">?</span><span class="token operator">:</span> FieldTypeExtension<span class="token punctuation">[</span><span class="token punctuation">]</span>
  validators<span class="token operator">?</span><span class="token operator">:</span> ValidatorExtension<span class="token punctuation">[</span><span class="token punctuation">]</span>
  renderers<span class="token operator">?</span><span class="token operator">:</span> RendererExtension<span class="token punctuation">[</span><span class="token punctuation">]</span>
  themes<span class="token operator">?</span><span class="token operator">:</span> ThemeExtension<span class="token punctuation">[</span><span class="token punctuation">]</span>
  initialize<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>eventEmitter<span class="token operator">:</span> EventEmitter<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  destroy<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PluginMetadata</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  version<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  author<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  dependencies<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  homepage<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  license<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span></code></pre><h3>Creating a Field Type Plugin</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> phoneFieldPlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'phone-field'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">'International phone number field'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  fieldTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'phone'</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">parser</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> match <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@(\w+):\s*\[phone\s*(.*?)\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
      
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'phone'</span><span class="token punctuation">,</span>
        attributes<span class="token operator">:</span> <span class="token punctuation">{</span>
          pattern<span class="token operator">:</span> <span class="token string">'[+]?[0-9\\s\\-()]+'</span><span class="token punctuation">,</span>
          placeholder<span class="token operator">:</span> <span class="token string">'+1 (555) 123-4567'</span><span class="token punctuation">,</span>
          <span class="token operator">...</span><span class="token function">parseAttributes</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> phoneRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+]?[0-9\s\-()]+$</span><span class="token regex-delimiter">/</span></span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>phoneRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
          field<span class="token operator">:</span> field<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
          message<span class="token operator">:</span> <span class="token string">'Please enter a valid phone number'</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;input type="tel" 
              name="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" 
              pattern="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>pattern<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
              placeholder="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>placeholder<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"
              class="formdown-phone"></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h3>Creating a Validator Plugin</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> asyncValidatorPlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'async-validator'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  validators<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'unique-email'</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> field<span class="token punctuation">,</span> formData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value <span class="token operator">||</span> field<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">'email'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
      
      <span class="token comment">// Check uniqueness via API</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/check-email?email=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> exists <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      
      <span class="token keyword">return</span> <span class="token operator">!</span>exists
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">getMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'This email is already registered'</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'field-validate'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Add async validation support</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>unique<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> isUnique <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>validators<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>
          context<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
          context<span class="token punctuation">.</span>field<span class="token punctuation">,</span>
          context<span class="token punctuation">.</span>formData
        <span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isUnique<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          context<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            field<span class="token operator">:</span> context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>validators<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>field<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h3>Creating a Theme Plugin</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> bootstrapThemePlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'bootstrap-theme'</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">'Bootstrap 5 theme for Formdown'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  
  themes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'bootstrap'</span><span class="token punctuation">,</span>
    
    styles<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      .formdown-field {
        margin-bottom: 1rem;
      }
      
      .formdown-field label {
        @apply form-label;
      }
      
      .formdown-field input,
      .formdown-field select,
      .formdown-field textarea {
        @apply form-control;
      }
      
      .formdown-field input[type="checkbox"],
      .formdown-field input[type="radio"] {
        @apply form-check-input;
      }
      
      .formdown-error {
        @apply invalid-feedback d-block;
      }
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">fieldWrapper</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="mb-3">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">errorTemplate</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div class="invalid-feedback d-block">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'field-render'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Add Bootstrap classes</span>
      context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">=</span> 
        <span class="token punctuation">(</span>context<span class="token punctuation">.</span>field<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' form-control'</span>
      
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h2>Built-in Extensions</h2>
<h3>Core Extensions</h3>
<p>Formdown includes several built-in extensions:</p>
<h4>Smart Label Extension</h4>
<p>Automatically generates human-readable labels from field names:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">first_name</span></span> → <span class="token string">"First Name"</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">emailAddress</span></span> → <span class="token string">"Email Address"</span></code></pre><h4>Pattern Validation Extension</h4>
<p>Supports regex patterns in field names:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">username</span></span><span class="token punctuation">{</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z0<span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span>$<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h4>Other Option Extension</h4>
<p>Handles &quot;other&quot; options for selection fields:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">color</span></span><span class="token operator">:</span> <span class="token punctuation">[</span>radio options<span class="token operator">=</span><span class="token string">"Red,Blue,Green,*"</span><span class="token punctuation">]</span></code></pre><h3>Loading Built-in Extensions</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager<span class="token punctuation">,</span> loadBuiltinExtensions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>

<span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Load all built-in extensions</span>
<span class="token keyword">await</span> <span class="token function">loadBuiltinExtensions</span><span class="token punctuation">(</span>extensionManager<span class="token punctuation">)</span>

<span class="token comment">// Or load specific ones</span>
<span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">loadBuiltin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'smart-labels'</span><span class="token punctuation">,</span> <span class="token string">'pattern-validation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2>Event System</h2>
<h3>Event Types</h3>
<p>The extension system emits various events:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ExtensionEvent</span> <span class="token operator">=</span> 
  <span class="token operator">|</span> <span class="token string">'plugin:registered'</span>
  <span class="token operator">|</span> <span class="token string">'plugin:unregistered'</span>
  <span class="token operator">|</span> <span class="token string">'plugin:error'</span>
  <span class="token operator">|</span> <span class="token string">'hook:registered'</span>
  <span class="token operator">|</span> <span class="token string">'hook:executing'</span>
  <span class="token operator">|</span> <span class="token string">'hook:executed'</span>
  <span class="token operator">|</span> <span class="token string">'hook:error'</span></code></pre><h3>Subscribing to Events</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Subscribe to plugin events</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'plugin:registered'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Plugin </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>plugin<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> registered</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Subscribe to hook execution</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'hook:executing'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> hook<span class="token punctuation">,</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Executing hook </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hook<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Subscribe to errors</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'plugin:error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> plugin<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Plugin </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>plugin<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> error:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2>API Reference</h2>
<h3>ExtensionManager</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ExtensionManager</span> <span class="token punctuation">{</span>
  <span class="token comment">// Initialize the extension system</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  
  <span class="token comment">// Plugin management</span>
  <span class="token function">registerPlugin</span><span class="token punctuation">(</span>plugin<span class="token operator">:</span> Plugin<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> PluginOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  <span class="token function">unregisterPlugin</span><span class="token punctuation">(</span>pluginName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  <span class="token function">getPlugin</span><span class="token punctuation">(</span>pluginName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token function">listPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> PluginInfo<span class="token punctuation">[</span><span class="token punctuation">]</span>
  
  <span class="token comment">// Hook management</span>
  <span class="token function">registerHook</span><span class="token punctuation">(</span>hook<span class="token operator">:</span> Hook<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">executeHooks</span><span class="token punctuation">(</span>hookName<span class="token operator">:</span> HookName<span class="token punctuation">,</span> context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>
  
  <span class="token comment">// Built-in extensions</span>
  <span class="token function">loadBuiltin</span><span class="token punctuation">(</span>names<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  
  <span class="token comment">// Event system</span>
  <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ExtensionEvent<span class="token punctuation">,</span> handler<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">off</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ExtensionEvent<span class="token punctuation">,</span> handler<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ExtensionEvent<span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  
  <span class="token comment">// Configuration</span>
  <span class="token function">configure</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ExtensionOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span></code></pre><h3>Plugin Lifecycle</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  <span class="token comment">// Called when plugin is registered</span>
  initialize<span class="token operator">?</span><span class="token punctuation">(</span>eventEmitter<span class="token operator">:</span> EventEmitter<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  
  <span class="token comment">// Called when plugin is unregistered</span>
  destroy<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span>
  
  <span class="token comment">// Plugin can listen to events</span>
  on<span class="token operator">?</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> handler<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  
  <span class="token comment">// Plugin can emit events</span>
  emit<span class="token operator">?</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span></code></pre><h2>Performance Considerations</h2>
<h3>Hook Performance</h3>
<ul>
<li>Hooks should execute quickly (&lt; 50ms)</li>
<li>Use async hooks only when necessary</li>
<li>Consider debouncing for frequently called hooks</li>
</ul>
<h3>Memory Management</h3>
<ul>
<li>Clean up event listeners in destroy()</li>
<li>Avoid storing large objects in plugin state</li>
<li>Use WeakMap for object associations</li>
</ul>
<h3>Error Handling</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  errorHandling<span class="token operator">:</span> <span class="token punctuation">{</span>
    onPluginError<span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>     <span class="token comment">// 'ignore' | 'warn' | 'throw'</span>
    onHookError<span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>
    continueOnError<span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token comment">// Continue despite errors</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2>Security Best Practices</h2>
<h3>Input Sanitization</h3>
<p>Always sanitize user input in plugins:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> sanitizePlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'pre-parse'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span>content <span class="token operator">=</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h3>Content Security Policy</h3>
<p>Ensure plugins work with CSP:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Bad: Inline event handlers</span>
<span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'&lt;button onclick="handleClick()">Click&lt;/button>'</span>

<span class="token comment">// Good: Use data attributes</span>
<span class="token function-variable function">generator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'&lt;button data-action="click">Click&lt;/button>'</span></code></pre><h3>Validation</h3>
<p>Always validate plugin inputs:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Validate type</span>
  <span class="token class-name"><span class="token keyword">if</span></span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> field<span class="token operator">:</span> field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'Value must be a string'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// Validate format</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidFormat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> field<span class="token operator">:</span> field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'Invalid format'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h2>Testing Plugins</h2>
<h3>Unit Testing</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ExtensionManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./my-plugin'</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'MyPlugin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> extensionManager<span class="token operator">:</span> ExtensionManager
  
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>myPlugin<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'should parse custom field type'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
      content<span class="token operator">:</span> <span class="token string">'@rating: [rating max=5]'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> extensionManager<span class="token punctuation">.</span><span class="token function">executeHooks</span><span class="token punctuation">(</span><span class="token string">'pre-parse'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainEqual</span><span class="token punctuation">(</span>
      expect<span class="token punctuation">.</span><span class="token function">objectContaining</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">'rating'</span><span class="token punctuation">,</span>
        attributes<span class="token operator">:</span> <span class="token punctuation">{</span> max<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3>Integration Testing</h3>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> parseFormdown <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@formdown/core'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupExtensions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./setup'</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'plugin integrates with parser'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">setupExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">parseFormdown</span><span class="token punctuation">(</span>
    <span class="token string">'@email: [email unique]'</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> extensionManager <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>validators<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'unique-email'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2>Migration Guide</h2>
<h3>From Custom Parser to Plugin</h3>
<p>Before (custom parser):</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">parseCustomField</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Custom parsing logic</span>
<span class="token punctuation">}</span></code></pre><p>After (plugin):</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> customFieldPlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'custom-field'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'1.0.0'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  fieldTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'custom'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">parser</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Same parsing logic</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h3>From Inline Hooks to Plugin</h3>
<p>Before (inline hooks):</p>
<pre class="language-typescript"><code class="language-typescript">parser<span class="token punctuation">.</span><span class="token function-variable function">beforeParse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Transform content</span>
<span class="token punctuation">}</span></code></pre><p>After (plugin hooks):</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> transformPlugin<span class="token operator">:</span> Plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  metadata<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'transform'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'1.0.0'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'pre-parse'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Transform context.content</span>
      <span class="token keyword">return</span> context
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h2>Troubleshooting</h2>
<h3>Common Issues</h3>
<h4>Plugin Not Loading</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Check plugin registration</span>
<span class="token keyword">const</span> info <span class="token operator">=</span> extensionManager<span class="token punctuation">.</span><span class="token function">getPlugin</span><span class="token punctuation">(</span><span class="token string">'my-plugin'</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Plugin loaded:'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span>

<span class="token comment">// Check for errors</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'plugin:error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Plugin error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4>Hook Not Executing</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Enable debug logging</span>
<span class="token keyword">const</span> extensionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionManager</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  debug<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Log hook execution</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'hook:executing'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> hook <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Executing hook:'</span><span class="token punctuation">,</span> hook<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4>Performance Issues</h4>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Profile hook execution</span>
extensionManager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'hook:executed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> hook<span class="token punctuation">,</span> duration <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>duration <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Slow hook </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hook<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2>Contributing</h2>
<h3>Creating Community Plugins</h3>
<ol>
<li>Use the plugin template:</li>
</ol>
<pre class="language-bash"><code class="language-bash">npx create-formdown-plugin my-plugin</code></pre><ol start="2">
<li>Follow naming conventions:</li>
</ol>
<ul>
<li>Package: <code>formdown-plugin-{name}</code></li>
<li>Plugin name: <code>{name}-plugin</code></li>
</ul>
<ol start="3">
<li>Include metadata:</li>
</ol>
<pre class="language-typescript"><code class="language-typescript">metadata<span class="token operator">:</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'my-plugin'</span><span class="token punctuation">,</span>
  version<span class="token operator">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>
  author<span class="token operator">:</span> <span class="token string">'Your Name'</span><span class="token punctuation">,</span>
  homepage<span class="token operator">:</span> <span class="token string">'https://github.com/...'</span><span class="token punctuation">,</span>
  license<span class="token operator">:</span> <span class="token string">'MIT'</span>
<span class="token punctuation">}</span></code></pre><ol start="4">
<li>Document your plugin:</li>
</ol>
<ul>
<li>README with examples</li>
<li>API documentation</li>
<li>Migration guide if replacing existing functionality</li>
</ul>
<ol start="5">
<li>Publish to npm:</li>
</ol>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> publish <span class="token parameter variable">--tag</span> formdown-plugin</code></pre>b:["$","$L15",null,{"currentSlug":"extensions","children":["$","div",null,{"children":[["$","h1",null,{"className":"text-3xl font-bold text-gray-900 dark:text-white mb-6","children":"Extension System"}],["$","article",null,{"className":"$16","dangerouslySetInnerHTML":{"__html":"$17"}}]]}]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
18:I[6644,[],"IconMark"]
f:{"metadata":[["$","title","0",{"children":"Formdown - Markdown-based Form Builder"}],["$","meta","1",{"name":"description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","2",{"name":"author","content":"iyulab"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","meta","4",{"name":"keywords","content":"form builder,markdown forms,html forms,form generator,web forms,interactive forms,form validation,formdown,javascript forms,typescript forms"}],["$","meta","5",{"name":"creator","content":"iyulab"}],["$","meta","6",{"name":"publisher","content":"iyulab"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://formdown.dev/"}],["$","meta","10",{"property":"og:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","11",{"property":"og:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax. Build forms quickly with real-time preview, validation, and seamless integration."}],["$","meta","12",{"property":"og:url","content":"https://formdown.dev/"}],["$","meta","13",{"property":"og:site_name","content":"Formdown"}],["$","meta","14",{"property":"og:locale","content":"en_US"}],["$","meta","15",{"property":"og:image","content":"https://formdown.dev/logo.png"}],["$","meta","16",{"property":"og:image:width","content":"1200"}],["$","meta","17",{"property":"og:image:height","content":"630"}],["$","meta","18",{"property":"og:image:alt","content":"Formdown - Markdown-based Form Builder"}],["$","meta","19",{"property":"og:type","content":"website"}],["$","meta","20",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","21",{"name":"twitter:title","content":"Formdown - Markdown-based Form Builder"}],["$","meta","22",{"name":"twitter:description","content":"Create beautiful, interactive HTML forms using a simple markdown-like syntax."}],["$","meta","23",{"name":"twitter:image","content":"https://formdown.dev/logo.png"}],["$","link","24",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$L18","25",{}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
